import javax.swing.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;

public class PredictiveSystemCode{
    private static JFrame frame;

    public static void main(String[] args) {
        frame = new JFrame("Student Management System");
        frame.setSize(500, 250);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        frame.add(panel);

        JLabel courseLabel = new JLabel("Select Course:");
        courseLabel.setBounds(30, 70, 150, 25);
        panel.add(courseLabel);

        String[] courses = {
            "Cyber Security", "Data Science", "PowerBI", "Marketing Analytics", "Sales Analytics",
            "Supply Chain Analytics", "HR Analytics", "Finance Analytics", "Banking Analytics",
            "Coding for Kids", "Excel", "Data Law and Governance"
        };
        JComboBox<String> courseDropdown = new JComboBox<>(courses);
        courseDropdown.setBounds(200, 70, 250, 25);
        panel.add(courseDropdown);

        // Submit Button
        JButton submitButton = new JButton("Next");
        submitButton.setBounds(200, 120, 100, 25);
        panel.add(submitButton);

        submitButton.addActionListener(e -> {
            String courseCategory = (String) courseDropdown.getSelectedItem();

            // Direct the user to the appropriate course management system
            switch (courseCategory) {
                case "Cyber Security":
                    displayStudentManagementSystemCyberSecurity();
                    break;
                case "Data Science":
                    displayStudentManagementSystemDataScience();
                    break;
                case "PowerBI":
                    displayStudentManagementSystemPowerBI();
                    break;
                case "Marketing Analytics":
                    displayStudentManagementSystemMarketingAnalytics();
                    break;
                case "Sales Analytics":
                    displayStudentManagementSystemSalesAnalytics();
                    break;
                case "Supply Chain Analytics":
                    displayStudentManagementSystemSupplyChainAnalytics();
                    break;
                case "HR Analytics":
                    displayStudentManagementSystemHR_Analytics();
                    break;
                case "Finance Analytics":
                    displayStudentManagementSystemFinanceAnalytics();
                    break;
                case "Banking Analytics":
                    displayStudentManagementSystemBankingAnalytics();
                    break;
                case "Coding for Kids":
                    displayStudentManagementSystemCodingForKids();
                    break;
                case "Excel":
                    displayStudentManagementSystemExcel();
                    break;
                case "Data Law and Governance":
                    displayStudentManagementSystemDataLawAndGov();
                    break;
                default:
                    JOptionPane.showMessageDialog(frame, "Invalid course selected. Please select a valid course.");
            }
        });

        frame.setVisible(true);
    }
    // Display for Data Science
    private static void displayStudentManagementSystemDataScience() {
        frame = new JFrame("Data Science");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForDataScience(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForDataScience(JPanel panel) {
    	 panel.setLayout(null);

    	    // First Name
    	    JLabel firstNameLabel = new JLabel("First name:");
    	    firstNameLabel.setBounds(150, 20, 200, 25);
    	    panel.add(firstNameLabel);

    	    JTextField firstNameText = new JTextField(20);
    	    firstNameText.setBounds(350, 20, 200, 25);
    	    panel.add(firstNameText);

    	    // Last Name
    	    JLabel lastNameLabel = new JLabel("Last name:");
    	    lastNameLabel.setBounds(150, 60, 200, 25);
    	    panel.add(lastNameLabel);

    	    JTextField lastNameText = new JTextField(20);
    	    lastNameText.setBounds(350, 60, 200, 25);
    	    panel.add(lastNameText);

    	    // Fee Status
    	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
    	    feeBalanceLabel.setBounds(150, 100, 200, 25);
    	    panel.add(feeBalanceLabel);

    	    JTextField feeBalanceText = new JTextField(20);
    	    feeBalanceText.setBounds(350, 100, 200, 25);
    	    panel.add(feeBalanceText);

    	    // Start Date
    	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
    	    startDateLabel.setBounds(150, 140, 200, 25);
    	    panel.add(startDateLabel);

    	    JTextField startDateText = new JTextField(20);
    	    startDateText.setBounds(350, 140, 200, 25);
    	    panel.add(startDateText);

    	    // Completion Date
    	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
    	    completionDateLabel.setBounds(150, 180, 200, 25);
    	    panel.add(completionDateLabel);

    	    JTextField completionDateText = new JTextField(20);
    	    completionDateText.setBounds(350, 180, 200, 25);
    	    panel.add(completionDateText);

    	    // Class Attendance
    	    JLabel attendanceLabel = new JLabel("Class Attendance:");
    	    attendanceLabel.setBounds(150, 220, 200, 25);
    	    panel.add(attendanceLabel);

    	    JTextField attendanceText = new JTextField(20);
    	    attendanceText.setBounds(350, 220, 200, 25);
    	    panel.add(attendanceText);

    	    // Cohort Number
    	    JLabel cohortLabel = new JLabel("Cohort Number:");
    	    cohortLabel.setBounds(150, 260, 200, 25);
    	    panel.add(cohortLabel);

    	    JTextField cohortText = new JTextField(20);
    	    cohortText.setBounds(350, 260, 200, 25);
    	    panel.add(cohortText);

    	    // Buttons
    	    JButton saveButton = new JButton("Save");
    	    saveButton.setBounds(200, 320, 80, 25);
    	    panel.add(saveButton);

    	    JButton cancelButton = new JButton("Cancel");
    	    cancelButton.setBounds(300, 320, 80, 25);
    	    panel.add(cancelButton);

    	    JButton clearButton = new JButton("Clear");
    	    clearButton.setBounds(400, 320, 80, 25);
    	    panel.add(clearButton);

    	    // Button Actions
    	    saveButton.addActionListener(e -> {
    	        try {
    	            int cohort = Integer.parseInt(cohortText.getText());
    	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
    	            saveToDatabaseForDataScience(
    	                firstNameText.getText(),
    	                lastNameText.getText(),
    	                feeBalance,
    	                startDateText.getText(),
    	                completionDateText.getText(),
    	                attendanceText.getText(),
    	                cohort
    	            );
    	        } catch (NumberFormatException ex) {
    	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
    	        }
    	    });

    	    cancelButton.addActionListener(e -> System.exit(0));

    	    clearButton.addActionListener(e -> {
    	        firstNameText.setText("");
    	        lastNameText.setText("");
    	        feeBalanceText.setText("");
    	        startDateText.setText("");
    	        completionDateText.setText("");
    	        attendanceText.setText("");
    	        cohortText.setText("");
    	    });
    	}

    	private static void saveToDatabaseForDataScience(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
    	    String url = "jdbc:mysql://localhost:3306/Prototype";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO DataScienceStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setInt(3, feeBalance);
    	            preparedStatement.setString(4, startDate);
    	            preparedStatement.setString(5, completionDate);
    	            preparedStatement.setString(6, classAttendance);
    	            preparedStatement.setInt(7, cohort);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
    	}
    // Display for Cyber Security
    private static void displayStudentManagementSystemCyberSecurity() {
        frame = new JFrame("Cyber Security");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForCyberSecurity(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForCyberSecurity(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForCyberSecurity(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForCyberSecurity(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO CyberSecurityStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
   //Display for PowerBI
    private static void displayStudentManagementSystemPowerBI() {
        frame = new JFrame("PowerBI");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForPowerBI(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForPowerBI(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForPowerBI(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForPowerBI(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO PowerBIStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
    private static void displayStudentManagementSystemMarketingAnalytics() {
        frame = new JFrame("Marketing Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForMarketingAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForMarketingAnalytics(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForMarketingAnalytics(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForMarketingAnalytics(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO MarketingAnalyticsStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
    private static void displayStudentManagementSystemSalesAnalytics() {
        frame = new JFrame("Sales Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForSalesAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForSalesAnalytics(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForSalesAnalytics(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForSalesAnalytics(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO SalesAnalyticsStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
    
private static void displayStudentManagementSystemSupplyChainAnalytics() {
        frame = new JFrame("Supply Chain Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForSupplyChainAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForSupplyChainAnalytics(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForSupplyChainAnalytics(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForSupplyChainAnalytics(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO SupplyChainStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
   
    private static void displayStudentManagementSystemHR_Analytics() {
        frame = new JFrame("HR Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForHR_Analytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForHR_Analytics(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForHR_Analytics(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForHR_Analytics(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO HRAnalyticsStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
    
     private static void displayStudentManagementSystemFinanceAnalytics() {
        frame = new JFrame("Finance Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForFinanceAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForFinanceAnalytics(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForFinanceAnalytics(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForFinanceAnalytics(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO FinanceAnalyticsStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}

    private static void displayStudentManagementSystemBankingAnalytics() {
        frame = new JFrame("Banking Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForBankingAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForBankingAnalytics(JPanel panel) {
        panel.setLayout(null);
     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForBankingAnalytics(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForBankingAnalytics(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO BankingAnalyticsStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
    private static void displayStudentManagementSystemCodingForKids() {
        frame = new JFrame("Coding for kids");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForCodingForKids(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForCodingForKids(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForCodingForKids(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForCodingForKids(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO CodingStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
   
    private static void displayStudentManagementSystemExcel() {
        frame = new JFrame("Excel");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForExcel(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForExcel(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForExcel(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForExcel(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO ExcelStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
    private static void displayStudentManagementSystemDataLawAndGov() {
        frame = new JFrame("Data Law And Governance");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForDataLawAndGov(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForDataLawAndGov(JPanel panel) {
        panel.setLayout(null);

     // First Name
	    JLabel firstNameLabel = new JLabel("First name:");
	    firstNameLabel.setBounds(150, 20, 200, 25);
	    panel.add(firstNameLabel);

	    JTextField firstNameText = new JTextField(20);
	    firstNameText.setBounds(350, 20, 200, 25);
	    panel.add(firstNameText);

	    // Last Name
	    JLabel lastNameLabel = new JLabel("Last name:");
	    lastNameLabel.setBounds(150, 60, 200, 25);
	    panel.add(lastNameLabel);

	    JTextField lastNameText = new JTextField(20);
	    lastNameText.setBounds(350, 60, 200, 25);
	    panel.add(lastNameText);

	    // Fee Status
	    JLabel feeBalanceLabel = new JLabel("Fee Balance:");
	    feeBalanceLabel.setBounds(150, 100, 200, 25);
	    panel.add(feeBalanceLabel);

	    JTextField feeBalanceText = new JTextField(20);
	    feeBalanceText.setBounds(350, 100, 200, 25);
	    panel.add(feeBalanceText);

	    // Start Date
	    JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	    startDateLabel.setBounds(150, 140, 200, 25);
	    panel.add(startDateLabel);

	    JTextField startDateText = new JTextField(20);
	    startDateText.setBounds(350, 140, 200, 25);
	    panel.add(startDateText);

	    // Completion Date
	    JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	    completionDateLabel.setBounds(150, 180, 200, 25);
	    panel.add(completionDateLabel);

	    JTextField completionDateText = new JTextField(20);
	    completionDateText.setBounds(350, 180, 200, 25);
	    panel.add(completionDateText);

	    // Class Attendance
	    JLabel attendanceLabel = new JLabel("Class Attendance:");
	    attendanceLabel.setBounds(150, 220, 200, 25);
	    panel.add(attendanceLabel);

	    JTextField attendanceText = new JTextField(20);
	    attendanceText.setBounds(350, 220, 200, 25);
	    panel.add(attendanceText);

	    // Cohort Number
	    JLabel cohortLabel = new JLabel("Cohort Number:");
	    cohortLabel.setBounds(150, 260, 200, 25);
	    panel.add(cohortLabel);

	    JTextField cohortText = new JTextField(20);
	    cohortText.setBounds(350, 260, 200, 25);
	    panel.add(cohortText);

	    // Buttons
	    JButton saveButton = new JButton("Save");
	    saveButton.setBounds(200, 320, 80, 25);
	    panel.add(saveButton);

	    JButton cancelButton = new JButton("Cancel");
	    cancelButton.setBounds(300, 320, 80, 25);
	    panel.add(cancelButton);

	    JButton clearButton = new JButton("Clear");
	    clearButton.setBounds(400, 320, 80, 25);
	    panel.add(clearButton);

	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int feeBalance = Integer.parseInt(feeBalanceText.getText());
	            saveToDatabaseForDataLawAndGov(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                feeBalance,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        feeBalanceText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	    });
	}

	private static void saveToDatabaseForDataLawAndGov(String firstName, String lastName, int feeBalance, String startDate, String completionDate, String classAttendance, int cohort) {
	    String url = "jdbc:mysql://localhost:3306/Prototype";
	    String username = "root";
	    String password = "";

	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
	        String sql = "INSERT INTO DataLawAndGovStudents (FirstName, LastName, FeeBalance, StartDate, CompletionDate, ClassAttendance, Cohort) VALUES (?, ?, ?, ?, ?, ?, ?)";
	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
	            preparedStatement.setString(1, firstName);
	            preparedStatement.setString(2, lastName);
	            preparedStatement.setInt(3, feeBalance);
	            preparedStatement.setString(4, startDate);
	            preparedStatement.setString(5, completionDate);
	            preparedStatement.setString(6, classAttendance);
	            preparedStatement.setInt(7, cohort);

	            int rowsInserted = preparedStatement.executeUpdate();
	            if (rowsInserted > 0) {
	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
	            }
	        }
	    } catch (SQLException ex) {
	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
	    }
	}
}

