import javax.swing.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;

public class StudentMnagementSystem{
    private static JFrame frame;

    public static void main(String[] args) {
        frame = new JFrame("Student Management System");
        frame.setSize(700, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(null);
        frame.add(panel);

        JLabel courseLabel = new JLabel("Select Course:");
        courseLabel.setBounds(30, 70, 150, 25);
        panel.add(courseLabel);

        String[] courses = {
            "Cyber Security", "Data Science", "PowerBI", "Marketing Analytics", "Sales Analytics",
            "Supply Chain Analytics", "HR Analytics", "Finance Analytics", "Banking Analytics",
            "Coding for Kids", "Excel", "Data Law and Governance", "Long Program", "Telkom Analytics", "Data Journalism","Robotics and Automation","Location Intelligence and GIS"
        };
        JComboBox<String> courseDropdown = new JComboBox<>(courses);
        courseDropdown.setBounds(200, 70, 250, 25);
        panel.add(courseDropdown);

        // Submit Button
        JButton submitButton = new JButton("Next");
        submitButton.setBounds(200, 120, 100, 25);
        panel.add(submitButton);

        submitButton.addActionListener(e -> {
            String courseCategory = (String) courseDropdown.getSelectedItem();

            switch (courseCategory) {
                case "Cyber Security":
                   displayStudentManagementCyberSecurity();
                    break;
                case "Data Science":
                    displayStudentManagementSystemDataScience();
                    break;
                case "PowerBI":
                    displayStudentManagementSystemPowerBI();
                    break;
                case "Marketing Analytics":
                    displayStudentManagementSystemMarketingAnalytics();
                    break;
                case "Sales Analytics":
                    displayStudentManagementSystemSalesAnalytics();
                    break;
                case "Supply Chain Analytics":
                    displayStudentManagementSystemSupplyChainAnalytics();
                    break;
                case "HR Analytics":
                    displayStudentManagementSystemHR_Analytics();
                    break;
                case "Finance Analytics":
                    displayStudentManagementSystemFinanceAnalytics();
                    break;
                case "Banking Analytics":
                    displayStudentManagementSystemBankingAnalytics();
                    break;
                case "Coding for Kids":
                    displayStudentManagementSystemCodingForKids();
                    break;
                case "Excel":
                    displayStudentManagementSystemExcel();
                    break;
                case "Data Law and Governance":
                    displayStudentManagementSystemDataLawAndGov();
                    break;
                case "Long Program":
                	displayStudentManagementSystemLongProgram();
                	break;
                case "Telkom Analytics":
                	displayStudentManagementSystemTelkomAnalytics();
                	break;
                case "Data Journalism":
                	displayStudentManagementSystemDataJournalism();
                	break;
                case "Robotics and Automation":
                	displayStudentManagementSystemRoboticsAndAutomation();
                	break;
                case "Location Intelligence and GIS":
                	displayStudentManagementSystemLocationIntelligenceAndGis();
                	break;
                default:
                    JOptionPane.showMessageDialog(frame, "Invalid course selected. Please select a valid course.");
            }
        });

        frame.setVisible(true);
    }
    private static void displayStudentManagementSystemLocationIntelligenceAndGis() {
    	 frame = new JFrame("Location Intelligence And GIS");
         frame.setSize(700, 600);
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

         JPanel panel = new JPanel();
         frame.add(panel);

         placeComponentsForLocationIntelligenceAndGis(panel);
         frame.setVisible(true);
		
	}
	private static void placeComponentsForLocationIntelligenceAndGis(JPanel panel) {
		 panel.setLayout(null);
		  JLabel firstNameLabel = new JLabel("First Name:");
	        firstNameLabel.setBounds(150, 20, 150, 25);
	        panel.add(firstNameLabel);

	        JTextField firstNameText = new JTextField(20);
	        firstNameText.setBounds(310, 20, 200, 25);
	        panel.add(firstNameText);

	        JLabel lastNameLabel = new JLabel("Last Name:");
	        lastNameLabel.setBounds(150, 50, 150, 25);
	        panel.add(lastNameLabel);

	        JTextField lastNameText = new JTextField(20);
	        lastNameText.setBounds(310, 50, 200, 25);
	        panel.add(lastNameText);

	        JLabel emailLabel = new JLabel("Email:");
	        emailLabel.setBounds(150, 80, 150, 25);
	        panel.add(emailLabel);

	        JTextField emailText = new JTextField(20);
	        emailText.setBounds(310, 80, 200, 25);
	        panel.add(emailText);

	        JLabel phoneLabel = new JLabel("Phone Number:");
	        phoneLabel.setBounds(150, 110, 150, 25);
	        panel.add(phoneLabel);

	        JTextField phoneText = new JTextField(20);
	        phoneText.setBounds(310, 110, 200, 25);
	        panel.add(phoneText);

	        JLabel organisationLabel = new JLabel("Organisation:");
	        organisationLabel.setBounds(150, 140, 150, 25);
	        panel.add(organisationLabel);

	        JTextField organisationText = new JTextField(20);
	        organisationText.setBounds(310, 140, 200, 25);
	        panel.add(organisationText);

	        JLabel professionLabel = new JLabel("Profession:");
	        professionLabel.setBounds(150, 170, 150, 25);
	        panel.add(professionLabel);

	        JTextField professionText = new JTextField(20);
	        professionText.setBounds(310, 170, 200, 25);
	        panel.add(professionText);

	        JLabel totalFeeLabel = new JLabel("Total Fee:");
	        totalFeeLabel.setBounds(150, 200, 150, 25);
	        panel.add(totalFeeLabel);

	        JTextField totalFeeText = new JTextField(20);
	        totalFeeText.setBounds(310, 200, 200, 25);
	        panel.add(totalFeeText);

	        JLabel feePaidLabel = new JLabel("Fee Paid:");
	        feePaidLabel.setBounds(150, 230, 150, 25);
	        panel.add(feePaidLabel);

	        JTextField feePaidText = new JTextField(20);
	        feePaidText.setBounds(310, 230, 200, 25);
	        panel.add(feePaidText);

	        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	        startDateLabel.setBounds(150, 260, 150, 25);
	        panel.add(startDateLabel);

	        JTextField startDateText = new JTextField(20);
	        startDateText.setBounds(310, 260, 200, 25);
	        panel.add(startDateText);

	        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	        completionDateLabel.setBounds(150, 290, 150, 25);
	        panel.add(completionDateLabel);

	        JTextField completionDateText = new JTextField(20);
	        completionDateText.setBounds(310, 290, 200, 25);
	        panel.add(completionDateText);

	        JLabel attendanceLabel = new JLabel("Class Attendance:");
	        attendanceLabel.setBounds(150, 320, 150, 25);
	        panel.add(attendanceLabel);

	        JTextField attendanceText = new JTextField(20);
	        attendanceText.setBounds(310, 320, 200, 25);
	        panel.add(attendanceText);

	        JLabel cohortLabel = new JLabel("Cohort Number:");
	        cohortLabel.setBounds(150, 350, 150, 25);
	        panel.add(cohortLabel);

	        JTextField cohortText = new JTextField(20);
	        cohortText.setBounds(310, 350, 200, 25);
	        panel.add(cohortText);

	        JLabel commentLabel = new JLabel("Comment:");
	        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
	        panel.add(commentLabel);

	        JTextField commentText = new JTextField(20);
	        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
	        panel.add(commentText);

	        // Buttons
	        JButton saveButton = new JButton("Save");
	        saveButton.setBounds(150, 430, 80, 25);
	        panel.add(saveButton);

	        JButton cancelButton = new JButton("Cancel");
	        cancelButton.setBounds(250, 430, 80, 25);
	        panel.add(cancelButton);

	        JButton clearButton = new JButton("Clear");
	        clearButton.setBounds(350, 430, 80, 25);
	        panel.add(clearButton);

	        JButton backButton = new JButton("Back");
	        backButton.setBounds(450, 430, 80, 25);
	        panel.add(backButton);
	        
		        frame.setVisible(true);

		    // Button Actions
		    saveButton.addActionListener(e -> {
		        try {
		            int cohort = Integer.parseInt(cohortText.getText());
		            int TotalFee = Integer.parseInt(totalFeeText.getText());
		            int feepaid = Integer.parseInt(feePaidText.getText());
		            saveToDatabaseForLocationIntelligenceAndGis(
		                firstNameText.getText(),
		                lastNameText.getText(),
		                emailText.getText(),
		                phoneText.getText(),
		                organisationText.getText(),
		                professionText.getText(),
		                TotalFee,
		                feepaid,
		                startDateText.getText(),
		                completionDateText.getText(),
		                attendanceText.getText(),
		                cohort,
		                commentText.getText()
		            );
		        } catch (NumberFormatException ex) {
		            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
		        }
		    });

		    cancelButton.addActionListener(e -> System.exit(0));

		    clearButton.addActionListener(e -> {
		        firstNameText.setText("");
		        lastNameText.setText("");
		        emailText.setText("");
		        phoneText.setText("");
		        organisationText.setText("");
		        professionText.setText("");
		        totalFeeText.setText("");
		        feePaidText.setText("");
		        startDateText.setText("");
		        completionDateText.setText("");
		        attendanceText.setText("");
		        cohortText.setText("");
		        commentText.setText("");
		    });

		 	 backButton.addActionListener(e -> {
		    	    frame.dispose(); // Close current window
		    	    main(new String[]{}); // Restart the course selection window
		    	});
		 		
	}

	private static void saveToDatabaseForLocationIntelligenceAndGis(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO LocationIntelligenceAndGisStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}
	private static void displayStudentManagementSystemLongProgram() {
        frame = new JFrame("Long Program");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForLongProgram(panel);
        frame.setVisible(true);
		
	}
	private static void placeComponentsForLongProgram(JPanel panel) {
		panel.setLayout(null);
		// First Name
        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        // Last Name
        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        // Email
        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        // Phone Number
        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        // Organisation
        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        // Profession
        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        // Total Fee Payable
        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        // Fee Paid
        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        // Start Date
        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        // Completion Date
        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        // Class Attendance
        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        // Cohort Number
        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        // Module
        JLabel moduleLabel = new JLabel("Module:");
        moduleLabel.setBounds(150, 380, 150, 25);
        panel.add(moduleLabel);

        JTextField moduleText = new JTextField(20);
        moduleText.setBounds(310, 380, 200, 25);
        panel.add(moduleText);

        //Comment
        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 410, 150, 25);
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 410, 200, 25);
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 460, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 460, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 460, 80, 25);
        panel.add(clearButton);

        // Back Button
        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 460, 80, 25);
        panel.add(backButton);

        frame.setVisible(true);


   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForLongProgram(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                moduleText.getText(),
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        moduleText.setText("");
   	        commentText.setText("");
   	    });
   	 backButton.addActionListener(e -> {
   	    frame.dispose(); // Close current window
   	    main(new String[]{}); // Restart the course selection window
   	});
		
	}
	private static void saveToDatabaseForLongProgram(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
    			int feePaid,String startDate, String completionDate, String attendance, int cohort, String module, String comment) {
    		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
     	    String username = "root";
     	    String password = "";

     	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
     	        String sql = "INSERT INTO LongProgramStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Module, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
     	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
     	            preparedStatement.setString(1, firstName);
     	            preparedStatement.setString(2, lastName);
     	            preparedStatement.setString(3, email);
     	            preparedStatement.setString(4, phone);
     	            preparedStatement.setString(5, organisation);
     	            preparedStatement.setString(6, profession);
     	            preparedStatement.setInt(7, totalFee);
     	            preparedStatement.setInt(8, feePaid);
     	            preparedStatement.setString(9, startDate);
     	            preparedStatement.setString(10, completionDate);
     	           preparedStatement.setString(11, attendance);
     	            preparedStatement.setInt(12, cohort);
     	            preparedStatement.setString(13, module);
     	            preparedStatement.setString(14, comment);

     	            int rowsInserted = preparedStatement.executeUpdate();
     	            if (rowsInserted > 0) {
     	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
     	            }
     	        }
     	    } catch (SQLException ex) {
     	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
     	    }
		
	}
	private static void displayStudentManagementSystemRoboticsAndAutomation() {
    	 frame = new JFrame("Robotics and Automation");
         frame.setSize(700, 600);
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

         JPanel panel = new JPanel();
         frame.add(panel);

         placeComponentsForRoboticsAndAutomation(panel);
         frame.setVisible(true);
		
	}
	private static void placeComponentsForRoboticsAndAutomation(JPanel panel) {
		 panel.setLayout(null);

		  JLabel firstNameLabel = new JLabel("First Name:");
	        firstNameLabel.setBounds(150, 20, 150, 25);
	        panel.add(firstNameLabel);

	        JTextField firstNameText = new JTextField(20);
	        firstNameText.setBounds(310, 20, 200, 25);
	        panel.add(firstNameText);

	        JLabel lastNameLabel = new JLabel("Last Name:");
	        lastNameLabel.setBounds(150, 50, 150, 25);
	        panel.add(lastNameLabel);

	        JTextField lastNameText = new JTextField(20);
	        lastNameText.setBounds(310, 50, 200, 25);
	        panel.add(lastNameText);

	        JLabel emailLabel = new JLabel("Email:");
	        emailLabel.setBounds(150, 80, 150, 25);
	        panel.add(emailLabel);

	        JTextField emailText = new JTextField(20);
	        emailText.setBounds(310, 80, 200, 25);
	        panel.add(emailText);

	        JLabel phoneLabel = new JLabel("Phone Number:");
	        phoneLabel.setBounds(150, 110, 150, 25);
	        panel.add(phoneLabel);

	        JTextField phoneText = new JTextField(20);
	        phoneText.setBounds(310, 110, 200, 25);
	        panel.add(phoneText);

	        JLabel organisationLabel = new JLabel("Organisation:");
	        organisationLabel.setBounds(150, 140, 150, 25);
	        panel.add(organisationLabel);

	        JTextField organisationText = new JTextField(20);
	        organisationText.setBounds(310, 140, 200, 25);
	        panel.add(organisationText);

	        JLabel professionLabel = new JLabel("Profession:");
	        professionLabel.setBounds(150, 170, 150, 25);
	        panel.add(professionLabel);

	        JTextField professionText = new JTextField(20);
	        professionText.setBounds(310, 170, 200, 25);
	        panel.add(professionText);

	        JLabel totalFeeLabel = new JLabel("Total Fee:");
	        totalFeeLabel.setBounds(150, 200, 150, 25);
	        panel.add(totalFeeLabel);

	        JTextField totalFeeText = new JTextField(20);
	        totalFeeText.setBounds(310, 200, 200, 25);
	        panel.add(totalFeeText);

	        JLabel feePaidLabel = new JLabel("Fee Paid:");
	        feePaidLabel.setBounds(150, 230, 150, 25);
	        panel.add(feePaidLabel);

	        JTextField feePaidText = new JTextField(20);
	        feePaidText.setBounds(310, 230, 200, 25);
	        panel.add(feePaidText);

	        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	        startDateLabel.setBounds(150, 260, 150, 25);
	        panel.add(startDateLabel);

	        JTextField startDateText = new JTextField(20);
	        startDateText.setBounds(310, 260, 200, 25);
	        panel.add(startDateText);

	        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	        completionDateLabel.setBounds(150, 290, 150, 25);
	        panel.add(completionDateLabel);

	        JTextField completionDateText = new JTextField(20);
	        completionDateText.setBounds(310, 290, 200, 25);
	        panel.add(completionDateText);

	        JLabel attendanceLabel = new JLabel("Class Attendance:");
	        attendanceLabel.setBounds(150, 320, 150, 25);
	        panel.add(attendanceLabel);

	        JTextField attendanceText = new JTextField(20);
	        attendanceText.setBounds(310, 320, 200, 25);
	        panel.add(attendanceText);

	        JLabel cohortLabel = new JLabel("Cohort Number:");
	        cohortLabel.setBounds(150, 350, 150, 25);
	        panel.add(cohortLabel);

	        JTextField cohortText = new JTextField(20);
	        cohortText.setBounds(310, 350, 200, 25);
	        panel.add(cohortText);

	        JLabel commentLabel = new JLabel("Comment:");
	        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
	        panel.add(commentLabel);

	        JTextField commentText = new JTextField(20);
	        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
	        panel.add(commentText);

	        // Buttons
	        JButton saveButton = new JButton("Save");
	        saveButton.setBounds(150, 430, 80, 25);
	        panel.add(saveButton);

	        JButton cancelButton = new JButton("Cancel");
	        cancelButton.setBounds(250, 430, 80, 25);
	        panel.add(cancelButton);

	        JButton clearButton = new JButton("Clear");
	        clearButton.setBounds(350, 430, 80, 25);
	        panel.add(clearButton);

	        JButton backButton = new JButton("Back");
	        backButton.setBounds(450, 430, 80, 25);
	        panel.add(backButton);
	        
		        frame.setVisible(true);

		    // Button Actions
		    saveButton.addActionListener(e -> {
		        try {
		            int cohort = Integer.parseInt(cohortText.getText());
		            int TotalFee = Integer.parseInt(totalFeeText.getText());
		            int feepaid = Integer.parseInt(feePaidText.getText());
		            saveToDatabaseForRoboticsAndAutomation(
		                firstNameText.getText(),
		                lastNameText.getText(),
		                emailText.getText(),
		                phoneText.getText(),
		                organisationText.getText(),
		                professionText.getText(),
		                TotalFee,
		                feepaid,
		                startDateText.getText(),
		                completionDateText.getText(),
		                attendanceText.getText(),
		                cohort,
		                commentText.getText()
		            );
		        } catch (NumberFormatException ex) {
		            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
		        }
		    });

		    cancelButton.addActionListener(e -> System.exit(0));

		    clearButton.addActionListener(e -> {
		        firstNameText.setText("");
		        lastNameText.setText("");
		        emailText.setText("");
		        phoneText.setText("");
		        organisationText.setText("");
		        professionText.setText("");
		        totalFeeText.setText("");
		        feePaidText.setText("");
		        startDateText.setText("");
		        completionDateText.setText("");
		        attendanceText.setText("");
		        cohortText.setText("");
		        commentText.setText("");
		    });
		 	 backButton.addActionListener(e -> {
		    	    frame.dispose(); // Close current window
		    	    main(new String[]{}); // Restart the course selection window
		    	});
		 		
		
	}
	private static void saveToDatabaseForRoboticsAndAutomation(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO RoboticsAndAutomationStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
		
	}
	private static void displayStudentManagementSystemDataJournalism() {
    	 frame = new JFrame("Data Journalism");
         frame.setSize(700, 600);
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

         JPanel panel = new JPanel();
         frame.add(panel);

         placeComponentsForDataJournalism(panel);
         frame.setVisible(true);
		
	}
	private static void placeComponentsForDataJournalism(JPanel panel) {
		 panel.setLayout(null);

		  JLabel firstNameLabel = new JLabel("First Name:");
	        firstNameLabel.setBounds(150, 20, 150, 25);
	        panel.add(firstNameLabel);

	        JTextField firstNameText = new JTextField(20);
	        firstNameText.setBounds(310, 20, 200, 25);
	        panel.add(firstNameText);

	        JLabel lastNameLabel = new JLabel("Last Name:");
	        lastNameLabel.setBounds(150, 50, 150, 25);
	        panel.add(lastNameLabel);

	        JTextField lastNameText = new JTextField(20);
	        lastNameText.setBounds(310, 50, 200, 25);
	        panel.add(lastNameText);

	        JLabel emailLabel = new JLabel("Email:");
	        emailLabel.setBounds(150, 80, 150, 25);
	        panel.add(emailLabel);

	        JTextField emailText = new JTextField(20);
	        emailText.setBounds(310, 80, 200, 25);
	        panel.add(emailText);

	        JLabel phoneLabel = new JLabel("Phone Number:");
	        phoneLabel.setBounds(150, 110, 150, 25);
	        panel.add(phoneLabel);

	        JTextField phoneText = new JTextField(20);
	        phoneText.setBounds(310, 110, 200, 25);
	        panel.add(phoneText);

	        JLabel organisationLabel = new JLabel("Organisation:");
	        organisationLabel.setBounds(150, 140, 150, 25);
	        panel.add(organisationLabel);

	        JTextField organisationText = new JTextField(20);
	        organisationText.setBounds(310, 140, 200, 25);
	        panel.add(organisationText);

	        JLabel professionLabel = new JLabel("Profession:");
	        professionLabel.setBounds(150, 170, 150, 25);
	        panel.add(professionLabel);

	        JTextField professionText = new JTextField(20);
	        professionText.setBounds(310, 170, 200, 25);
	        panel.add(professionText);

	        JLabel totalFeeLabel = new JLabel("Total Fee:");
	        totalFeeLabel.setBounds(150, 200, 150, 25);
	        panel.add(totalFeeLabel);

	        JTextField totalFeeText = new JTextField(20);
	        totalFeeText.setBounds(310, 200, 200, 25);
	        panel.add(totalFeeText);

	        JLabel feePaidLabel = new JLabel("Fee Paid:");
	        feePaidLabel.setBounds(150, 230, 150, 25);
	        panel.add(feePaidLabel);

	        JTextField feePaidText = new JTextField(20);
	        feePaidText.setBounds(310, 230, 200, 25);
	        panel.add(feePaidText);

	        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
	        startDateLabel.setBounds(150, 260, 150, 25);
	        panel.add(startDateLabel);

	        JTextField startDateText = new JTextField(20);
	        startDateText.setBounds(310, 260, 200, 25);
	        panel.add(startDateText);

	        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
	        completionDateLabel.setBounds(150, 290, 150, 25);
	        panel.add(completionDateLabel);

	        JTextField completionDateText = new JTextField(20);
	        completionDateText.setBounds(310, 290, 200, 25);
	        panel.add(completionDateText);

	        JLabel attendanceLabel = new JLabel("Class Attendance:");
	        attendanceLabel.setBounds(150, 320, 150, 25);
	        panel.add(attendanceLabel);

	        JTextField attendanceText = new JTextField(20);
	        attendanceText.setBounds(310, 320, 200, 25);
	        panel.add(attendanceText);

	        JLabel cohortLabel = new JLabel("Cohort Number:");
	        cohortLabel.setBounds(150, 350, 150, 25);
	        panel.add(cohortLabel);

	        JTextField cohortText = new JTextField(20);
	        cohortText.setBounds(310, 350, 200, 25);
	        panel.add(cohortText);

	        JLabel commentLabel = new JLabel("Comment:");
	        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
	        panel.add(commentLabel);

	        JTextField commentText = new JTextField(20);
	        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
	        panel.add(commentText);

	        // Buttons
	        JButton saveButton = new JButton("Save");
	        saveButton.setBounds(150, 430, 80, 25);
	        panel.add(saveButton);

	        JButton cancelButton = new JButton("Cancel");
	        cancelButton.setBounds(250, 430, 80, 25);
	        panel.add(cancelButton);

	        JButton clearButton = new JButton("Clear");
	        clearButton.setBounds(350, 430, 80, 25);
	        panel.add(clearButton);

	        JButton backButton = new JButton("Back");
	        backButton.setBounds(450, 430, 80, 25);
	        panel.add(backButton);
	        
		        frame.setVisible(true);
		    // Button Actions
		    saveButton.addActionListener(e -> {
		        try {
		            int cohort = Integer.parseInt(cohortText.getText());
		            int TotalFee = Integer.parseInt(totalFeeText.getText());
		            int feepaid = Integer.parseInt(feePaidText.getText());
		            saveToDatabaseForDataJournalism(
		                firstNameText.getText(),
		                lastNameText.getText(),
		                emailText.getText(),
		                phoneText.getText(),
		                organisationText.getText(),
		                professionText.getText(),
		                TotalFee,
		                feepaid,
		                startDateText.getText(),
		                completionDateText.getText(),
		                attendanceText.getText(),
		                cohort,
		                commentText.getText()
		            );
		        } catch (NumberFormatException ex) {
		            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
		        }
		    });

		    cancelButton.addActionListener(e -> System.exit(0));

		    clearButton.addActionListener(e -> {
		        firstNameText.setText("");
		        lastNameText.setText("");
		        emailText.setText("");
		        phoneText.setText("");
		        organisationText.setText("");
		        professionText.setText("");
		        totalFeeText.setText("");
		        feePaidText.setText("");
		        startDateText.setText("");
		        completionDateText.setText("");
		        attendanceText.setText("");
		        cohortText.setText("");
		        commentText.setText("");
		    });
		    backButton.addActionListener(e -> {
		   	    frame.dispose(); // Close current window
		   	    main(new String[]{}); // Restart the course selection window
		   	});
		
	}
	private static void saveToDatabaseForDataJournalism(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO DataJournalismStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
    	    }
	private static void displayStudentManagementCyberSecurity() {
    	 frame = new JFrame("Cyber Security");
         frame.setSize(700, 600);
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

         JPanel panel = new JPanel();
         frame.add(panel);

         placeComponentsForCyberSecurity(panel);
         frame.setVisible(true);
		
	}
	private static void placeComponentsForCyberSecurity(JPanel panel) {
   	 panel.setLayout(null);

     JLabel firstNameLabel = new JLabel("First Name:");
     firstNameLabel.setBounds(150, 20, 150, 25);
     panel.add(firstNameLabel);

     JTextField firstNameText = new JTextField(20);
     firstNameText.setBounds(310, 20, 200, 25);
     panel.add(firstNameText);

     JLabel lastNameLabel = new JLabel("Last Name:");
     lastNameLabel.setBounds(150, 50, 150, 25);
     panel.add(lastNameLabel);

     JTextField lastNameText = new JTextField(20);
     lastNameText.setBounds(310, 50, 200, 25);
     panel.add(lastNameText);

     JLabel emailLabel = new JLabel("Email:");
     emailLabel.setBounds(150, 80, 150, 25);
     panel.add(emailLabel);

     JTextField emailText = new JTextField(20);
     emailText.setBounds(310, 80, 200, 25);
     panel.add(emailText);

     JLabel phoneLabel = new JLabel("Phone Number:");
     phoneLabel.setBounds(150, 110, 150, 25);
     panel.add(phoneLabel);

     JTextField phoneText = new JTextField(20);
     phoneText.setBounds(310, 110, 200, 25);
     panel.add(phoneText);

     JLabel organisationLabel = new JLabel("Organisation:");
     organisationLabel.setBounds(150, 140, 150, 25);
     panel.add(organisationLabel);

     JTextField organisationText = new JTextField(20);
     organisationText.setBounds(310, 140, 200, 25);
     panel.add(organisationText);

     JLabel professionLabel = new JLabel("Profession:");
     professionLabel.setBounds(150, 170, 150, 25);
     panel.add(professionLabel);

     JTextField professionText = new JTextField(20);
     professionText.setBounds(310, 170, 200, 25);
     panel.add(professionText);

     JLabel totalFeeLabel = new JLabel("Total Fee:");
     totalFeeLabel.setBounds(150, 200, 150, 25);
     panel.add(totalFeeLabel);

     JTextField totalFeeText = new JTextField(20);
     totalFeeText.setBounds(310, 200, 200, 25);
     panel.add(totalFeeText);

     JLabel feePaidLabel = new JLabel("Fee Paid:");
     feePaidLabel.setBounds(150, 230, 150, 25);
     panel.add(feePaidLabel);

     JTextField feePaidText = new JTextField(20);
     feePaidText.setBounds(310, 230, 200, 25);
     panel.add(feePaidText);

     JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
     startDateLabel.setBounds(150, 260, 150, 25);
     panel.add(startDateLabel);

     JTextField startDateText = new JTextField(20);
     startDateText.setBounds(310, 260, 200, 25);
     panel.add(startDateText);

     JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
     completionDateLabel.setBounds(150, 290, 150, 25);
     panel.add(completionDateLabel);

     JTextField completionDateText = new JTextField(20);
     completionDateText.setBounds(310, 290, 200, 25);
     panel.add(completionDateText);

     JLabel attendanceLabel = new JLabel("Class Attendance:");
     attendanceLabel.setBounds(150, 320, 150, 25);
     panel.add(attendanceLabel);

     JTextField attendanceText = new JTextField(20);
     attendanceText.setBounds(310, 320, 200, 25);
     panel.add(attendanceText);

     JLabel cohortLabel = new JLabel("Cohort Number:");
     cohortLabel.setBounds(150, 350, 150, 25);
     panel.add(cohortLabel);

     JTextField cohortText = new JTextField(20);
     cohortText.setBounds(310, 350, 200, 25);
     panel.add(cohortText);

     JLabel commentLabel = new JLabel("Comment:");
     commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
     panel.add(commentLabel);

     JTextField commentText = new JTextField(20);
     commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
     panel.add(commentText);

     // Buttons
     JButton saveButton = new JButton("Save");
     saveButton.setBounds(150, 430, 80, 25);
     panel.add(saveButton);

     JButton cancelButton = new JButton("Cancel");
     cancelButton.setBounds(250, 430, 80, 25);
     panel.add(cancelButton);

     JButton clearButton = new JButton("Clear");
     clearButton.setBounds(350, 430, 80, 25);
     panel.add(clearButton);

     JButton backButton = new JButton("Back");
     backButton.setBounds(450, 430, 80, 25);
     panel.add(backButton);
     
	        frame.setVisible(true);
	        
	    // Button Actions
	    saveButton.addActionListener(e -> {
	        try {
	            int cohort = Integer.parseInt(cohortText.getText());
	            int TotalFee = Integer.parseInt(totalFeeText.getText());
	            int feepaid = Integer.parseInt(feePaidText.getText());
	            saveToDatabaseForCyberSecurity(
	                firstNameText.getText(),
	                lastNameText.getText(),
	                emailText.getText(),
	                phoneText.getText(),
	                organisationText.getText(),
	                professionText.getText(),
	                TotalFee,
	                feepaid,
	                startDateText.getText(),
	                completionDateText.getText(),
	                attendanceText.getText(),
	                cohort,
	                commentText.getText()
	            );
	        } catch (NumberFormatException ex) {
	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
	        }
	    });

	    cancelButton.addActionListener(e -> System.exit(0));

	    clearButton.addActionListener(e -> {
	        firstNameText.setText("");
	        lastNameText.setText("");
	        emailText.setText("");
	        phoneText.setText("");
	        organisationText.setText("");
	        professionText.setText("");
	        totalFeeText.setText("");
	        feePaidText.setText("");
	        startDateText.setText("");
	        completionDateText.setText("");
	        attendanceText.setText("");
	        cohortText.setText("");
	        commentText.setText("");
	    });
	    backButton.addActionListener(e -> {
	   	    frame.dispose(); // Close current window
	   	    main(new String[]{}); // Restart the course selection window
	   	});
		
	}
	private static void saveToDatabaseForCyberSecurity(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
 	    String username = "root";
 	    String password = "";

 	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
 	        String sql = "INSERT INTO CyberSecurityStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
 	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
 	            preparedStatement.setString(1, firstName);
 	            preparedStatement.setString(2, lastName);
 	            preparedStatement.setString(3, email);
 	            preparedStatement.setString(4, phone);
 	            preparedStatement.setString(5, organisation);
 	            preparedStatement.setString(6, profession);
 	            preparedStatement.setInt(7, totalFee);
 	            preparedStatement.setInt(8, feePaid);
 	            preparedStatement.setString(9, startDate);
 	            preparedStatement.setString(10, completionDate);
 	           preparedStatement.setString(11, attendance);
 	            preparedStatement.setInt(12, cohort);
 	            preparedStatement.setString(13, comment);

 	            int rowsInserted = preparedStatement.executeUpdate();
 	            if (rowsInserted > 0) {
 	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
 	            }
 	        }
 	    } catch (SQLException ex) {
 	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
 	    }
		
	}
	// Display for Data Science
    private static void displayStudentManagementSystemDataScience() {
        frame = new JFrame("Data Science");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForDataScience(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForDataScience(JPanel panel) {
    	 panel.setLayout(null);

    	// First Name
         JLabel firstNameLabel = new JLabel("First Name:");
         firstNameLabel.setBounds(150, 20, 150, 25);
         panel.add(firstNameLabel);

         JTextField firstNameText = new JTextField(20);
         firstNameText.setBounds(310, 20, 200, 25);
         panel.add(firstNameText);

         // Last Name
         JLabel lastNameLabel = new JLabel("Last Name:");
         lastNameLabel.setBounds(150, 50, 150, 25);
         panel.add(lastNameLabel);

         JTextField lastNameText = new JTextField(20);
         lastNameText.setBounds(310, 50, 200, 25);
         panel.add(lastNameText);

         // Email
         JLabel emailLabel = new JLabel("Email:");
         emailLabel.setBounds(150, 80, 150, 25);
         panel.add(emailLabel);

         JTextField emailText = new JTextField(20);
         emailText.setBounds(310, 80, 200, 25);
         panel.add(emailText);

         // Phone Number
         JLabel phoneLabel = new JLabel("Phone Number:");
         phoneLabel.setBounds(150, 110, 150, 25);
         panel.add(phoneLabel);

         JTextField phoneText = new JTextField(20);
         phoneText.setBounds(310, 110, 200, 25);
         panel.add(phoneText);

         // Organisation
         JLabel organisationLabel = new JLabel("Organisation:");
         organisationLabel.setBounds(150, 140, 150, 25);
         panel.add(organisationLabel);

         JTextField organisationText = new JTextField(20);
         organisationText.setBounds(310, 140, 200, 25);
         panel.add(organisationText);

         // Profession
         JLabel professionLabel = new JLabel("Profession:");
         professionLabel.setBounds(150, 170, 150, 25);
         panel.add(professionLabel);

         JTextField professionText = new JTextField(20);
         professionText.setBounds(310, 170, 200, 25);
         panel.add(professionText);

         // Total Fee Payable
         JLabel totalFeeLabel = new JLabel("Total Fee:");
         totalFeeLabel.setBounds(150, 200, 150, 25);
         panel.add(totalFeeLabel);

         JTextField totalFeeText = new JTextField(20);
         totalFeeText.setBounds(310, 200, 200, 25);
         panel.add(totalFeeText);

         // Fee Paid
         JLabel feePaidLabel = new JLabel("Fee Paid:");
         feePaidLabel.setBounds(150, 230, 150, 25);
         panel.add(feePaidLabel);

         JTextField feePaidText = new JTextField(20);
         feePaidText.setBounds(310, 230, 200, 25);
         panel.add(feePaidText);

         // Start Date
         JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
         startDateLabel.setBounds(150, 260, 150, 25);
         panel.add(startDateLabel);

         JTextField startDateText = new JTextField(20);
         startDateText.setBounds(310, 260, 200, 25);
         panel.add(startDateText);

         // Completion Date
         JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
         completionDateLabel.setBounds(150, 290, 150, 25);
         panel.add(completionDateLabel);

         JTextField completionDateText = new JTextField(20);
         completionDateText.setBounds(310, 290, 200, 25);
         panel.add(completionDateText);

         // Class Attendance
         JLabel attendanceLabel = new JLabel("Class Attendance:");
         attendanceLabel.setBounds(150, 320, 150, 25);
         panel.add(attendanceLabel);

         JTextField attendanceText = new JTextField(20);
         attendanceText.setBounds(310, 320, 200, 25);
         panel.add(attendanceText);

         // Cohort Number
         JLabel cohortLabel = new JLabel("Cohort Number:");
         cohortLabel.setBounds(150, 350, 150, 25);
         panel.add(cohortLabel);

         JTextField cohortText = new JTextField(20);
         cohortText.setBounds(310, 350, 200, 25);
         panel.add(cohortText);

         // Module
         JLabel moduleLabel = new JLabel("Module:");
         moduleLabel.setBounds(150, 380, 150, 25);
         panel.add(moduleLabel);

         JTextField moduleText = new JTextField(20);
         moduleText.setBounds(310, 380, 200, 25);
         panel.add(moduleText);

         //Comment
         JLabel commentLabel = new JLabel("Comment:");
         commentLabel.setBounds(150, 410, 150, 25);
         panel.add(commentLabel);

         JTextField commentText = new JTextField(20);
         commentText.setBounds(310, 410, 200, 25);
         panel.add(commentText);

         // Buttons
         JButton saveButton = new JButton("Save");
         saveButton.setBounds(150, 460, 80, 25);
         panel.add(saveButton);

         JButton cancelButton = new JButton("Cancel");
         cancelButton.setBounds(250, 460, 80, 25);
         panel.add(cancelButton);

         JButton clearButton = new JButton("Clear");
         clearButton.setBounds(350, 460, 80, 25);
         panel.add(clearButton);

         // Back Button
         JButton backButton = new JButton("Back");
         backButton.setBounds(450, 460, 80, 25);
         panel.add(backButton);

         frame.setVisible(true);

    	    // Button Actions
    	    saveButton.addActionListener(e -> {
    	        try {
    	            int cohort = Integer.parseInt(cohortText.getText());
    	            int TotalFee = Integer.parseInt(totalFeeText.getText());
    	            int feepaid = Integer.parseInt(feePaidText.getText());
    	            saveToDatabaseForDataScience(
    	                firstNameText.getText(),
    	                lastNameText.getText(),
    	                emailText.getText(),
    	                phoneText.getText(),
    	                organisationText.getText(),
    	                professionText.getText(),
    	                TotalFee,
    	                feepaid,
    	                startDateText.getText(),
    	                completionDateText.getText(),
    	                attendanceText.getText(),
    	                cohort,
    	                moduleText.getText(),
    	                commentText.getText()
    	            );
    	        } catch (NumberFormatException ex) {
    	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
    	        }
    	    });

    	    cancelButton.addActionListener(e -> System.exit(0));

    	    clearButton.addActionListener(e -> {
    	        firstNameText.setText("");
    	        lastNameText.setText("");
    	        emailText.setText("");
    	        phoneText.setText("");
    	        organisationText.setText("");
    	        professionText.setText("");
    	        totalFeeText.setText("");
    	        feePaidText.setText("");
    	        startDateText.setText("");
    	        completionDateText.setText("");
    	        attendanceText.setText("");
    	        cohortText.setText("");
    	        moduleText.setText("");
    	        commentText.setText("");
    	    });
    	 	 backButton.addActionListener(e -> {
    	    	    frame.dispose(); // Close current window
    	    	    main(new String[]{}); // Restart the course selection window
    	    	});
    	 		
    		
    	}
    	private static void saveToDatabaseForDataScience(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
    			int feePaid,String startDate, String completionDate, String attendance, int cohort, String module, String comment) {
    		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
     	    String username = "root";
     	    String password = "";

     	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
     	        String sql = "INSERT INTO DataScienceStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Module, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
     	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
     	            preparedStatement.setString(1, firstName);
     	            preparedStatement.setString(2, lastName);
     	            preparedStatement.setString(3, email);
     	            preparedStatement.setString(4, phone);
     	            preparedStatement.setString(5, organisation);
     	            preparedStatement.setString(6, profession);
     	            preparedStatement.setInt(7, totalFee);
     	            preparedStatement.setInt(8, feePaid);
     	            preparedStatement.setString(9, startDate);
     	            preparedStatement.setString(10, completionDate);
     	           preparedStatement.setString(11, attendance);
     	            preparedStatement.setInt(12, cohort);
     	            preparedStatement.setString(13, module);
     	            preparedStatement.setString(14, comment);

     	            int rowsInserted = preparedStatement.executeUpdate();
     	            if (rowsInserted > 0) {
     	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
     	            }
     	        }
     	    } catch (SQLException ex) {
     	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
     	    }
    		
    	}
    // Display for Telkom Analytics
    private static void displayStudentManagementSystemTelkomAnalytics() {
        frame = new JFrame("Telkom Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForTelkomAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForTelkomAnalytics(JPanel panel) {
        panel.setLayout(null);


        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForTelkomAnalytics(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
    	 backButton.addActionListener(e -> {
    	   	    frame.dispose(); // Close current window
    	   	    main(new String[]{}); // Restart the course selection window
    	   	});
    			
   		
   	}
   	private static void saveToDatabaseForTelkomAnalytics(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO TelkomAnalyticsStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
   		
   	}
   //Display for PowerBI
    private static void displayStudentManagementSystemPowerBI() {
        frame = new JFrame("PowerBI");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForPowerBI(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForPowerBI(JPanel panel) {
        panel.setLayout(null);
        
        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); 
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); 
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForPowerBI(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
    	 backButton.addActionListener(e -> {
    	   	    frame.dispose(); // Close current window
    	   	    main(new String[]{}); // Restart the course selection window
    	   	});
    			
   		
   	}
   	private static void saveToDatabaseForPowerBI(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO PowerBIstudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
   		
   	}
    private static void displayStudentManagementSystemMarketingAnalytics() {
        frame = new JFrame("Marketing Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForMarketingAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForMarketingAnalytics(JPanel panel) {
        panel.setLayout(null);

        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);
   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForMarketingAnalytics(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
   	 backButton.addActionListener(e -> {
    	    frame.dispose(); // Close current window
    	    main(new String[]{}); // Restart the course selection window
    	});
   		
   	}
   	private static void saveToDatabaseForMarketingAnalytics(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO MarketingAnalyticsMasterClass (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
   		
   	}   
   	
   	private static void displayStudentManagementSystemSalesAnalytics() {
        frame = new JFrame("Sales Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForSalesAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForSalesAnalytics(JPanel panel) {
        panel.setLayout(null);

        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        // Last Name
        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        // Email
        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        // Phone Number
        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        // Organisation
        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        // Profession
        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        // Total Fee Payable
        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        // Fee Paid
        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        // Start Date
        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        // Completion Date
        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        // Class Attendance
        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        // Cohort Number
        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        //Comment
        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 410, 150, 25);
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 410, 200, 25);
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 460, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 460, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 460, 80, 25);
        panel.add(clearButton);

        // Back Button
        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 460, 80, 25);
        panel.add(backButton);

        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForSalesAnalytics(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
   	 backButton.addActionListener(e -> {
    	    frame.dispose(); // Close current window
    	    main(new String[]{}); // Restart the course selection window
    	});
 		
   	}

	private static void saveToDatabaseForSalesAnalytics(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO SalesAnalyticsMasterclass (FirstName, LastName, Email, Phone, Organisation, profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}
    
private static void displayStudentManagementSystemSupplyChainAnalytics() {
        frame = new JFrame("Supply Chain Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForSupplyChainAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForSupplyChainAnalytics(JPanel panel) {
        panel.setLayout(null);


        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        // Last Name
        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        // Email
        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        // Phone Number
        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        // Organisation
        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        // Profession
        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        // Total Fee Payable
        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        // Fee Paid
        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        // Start Date
        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        // Completion Date
        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        // Class Attendance
        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        // Cohort Number
        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        //Comment
        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 410, 150, 25);
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 410, 200, 25);
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 460, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 460, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 460, 80, 25);
        panel.add(clearButton);

        // Back Button
        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 460, 80, 25);
        panel.add(backButton);

        frame.setVisible(true);

      	    // Button Actions
      	    saveButton.addActionListener(e -> {
      	        try {
      	            int cohort = Integer.parseInt(cohortText.getText());
      	            int TotalFee = Integer.parseInt(totalFeeText.getText());
      	            int feepaid = Integer.parseInt(feePaidText.getText());
      	            saveToDatabaseForSupplyChainAnalytics(
      	                firstNameText.getText(),
      	                lastNameText.getText(),
      	                emailText.getText(),
      	                phoneText.getText(),
      	                organisationText.getText(),
      	                professionText.getText(),
      	                TotalFee,
      	                feepaid,
      	                startDateText.getText(),
      	                completionDateText.getText(),
      	                attendanceText.getText(),
      	                cohort,
      	                commentText.getText()
      	            );
      	        } catch (NumberFormatException ex) {
      	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
      	        }
      	    });

      	    cancelButton.addActionListener(e -> System.exit(0));

      	    clearButton.addActionListener(e -> {
      	        firstNameText.setText("");
      	        lastNameText.setText("");
      	        emailText.setText("");
      	        phoneText.setText("");
      	        organisationText.setText("");
      	        professionText.setText("");
      	        totalFeeText.setText("");
      	        feePaidText.setText("");
      	        startDateText.setText("");
      	        completionDateText.setText("");
      	        attendanceText.setText("");
      	        cohortText.setText("");
      	        commentText.setText("");
      	    });
      		 backButton.addActionListener(e -> {
      	   	    frame.dispose(); // Close current window
      	   	    main(new String[]{}); // Restart the course selection window
      	   	});
      			
	}

	private static void saveToDatabaseForSupplyChainAnalytics(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO SupplyChainMasterclass (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
   		
	}
   
    private static void displayStudentManagementSystemHR_Analytics() {
        frame = new JFrame("HR Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForHR_Analytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForHR_Analytics(JPanel panel) {
        panel.setLayout(null);


        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);
      	    // Button Actions
      	    saveButton.addActionListener(e -> {
      	        try {
      	            int cohort = Integer.parseInt(cohortText.getText());
      	            int TotalFee = Integer.parseInt(totalFeeText.getText());
      	            int feepaid = Integer.parseInt(feePaidText.getText());
      	            saveToDatabaseForHR_Analytics(
      	                firstNameText.getText(),
      	                lastNameText.getText(),
      	                emailText.getText(),
      	                phoneText.getText(),
      	                organisationText.getText(),
      	                professionText.getText(),
      	                TotalFee,
      	                feepaid,
      	                startDateText.getText(),
      	                completionDateText.getText(),
      	                attendanceText.getText(),
      	                cohort,
      	                commentText.getText()
      	            );
      	        } catch (NumberFormatException ex) {
      	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
      	        }
      	    });

      	    cancelButton.addActionListener(e -> System.exit(0));

      	    clearButton.addActionListener(e -> {
      	        firstNameText.setText("");
      	        lastNameText.setText("");
      	        emailText.setText("");
      	        phoneText.setText("");
      	        organisationText.setText("");
      	        professionText.setText("");
      	        totalFeeText.setText("");
      	        feePaidText.setText("");
      	        startDateText.setText("");
      	        completionDateText.setText("");
      	        attendanceText.setText("");
      	        cohortText.setText("");
      	        commentText.setText("");
      	    });
      	  backButton.addActionListener(e -> {
         	    frame.dispose(); // Close current window
         	    main(new String[]{}); // Restart the course selection window
         	});
      	    
    }
	private static void saveToDatabaseForHR_Analytics(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO HRAnalyticsMasterclass (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}
	
	
     private static void displayStudentManagementSystemFinanceAnalytics() {
        frame = new JFrame("Finance Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForFinanceAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForFinanceAnalytics(JPanel panel) {
        panel.setLayout(null);


        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForFinanceAnalytics(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
    	 backButton.addActionListener(e -> {
    	   	    frame.dispose(); // Close current window
    	   	    main(new String[]{}); // Restart the course selection window
    	   	});
    			
    			
	}

	private static void saveToDatabaseForFinanceAnalytics(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO FinanceAnalyticsMasterclass (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}

    private static void displayStudentManagementSystemBankingAnalytics() {
        frame = new JFrame("Banking Analytics");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForBankingAnalytics(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForBankingAnalytics(JPanel panel) {
        panel.setLayout(null);

        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25);
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); 
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForBankingAnalytics(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
    	 backButton.addActionListener(e -> {
    	   	    frame.dispose(); // Close current window
    	   	    main(new String[]{}); // Restart the course selection window
    	   	});
	}
    

	private static void saveToDatabaseForBankingAnalytics(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO BankingAnalyticsMasterclass (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}
    private static void displayStudentManagementSystemCodingForKids() {
        frame = new JFrame("Coding for kids");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForCodingForKids(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForCodingForKids(JPanel panel) {
        panel.setLayout(null);

        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); 
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); 
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForCodingForKids(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
    	 backButton.addActionListener(e -> {
    	   	    frame.dispose(); // Close current window
    	   	    main(new String[]{}); // Restart the course selection window
    	   	});
    			
	}

	private static void saveToDatabaseForCodingForKids(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO CodingStudents (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}
   
    private static void displayStudentManagementSystemExcel() {
        frame = new JFrame("Excel");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForExcel(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForExcel(JPanel panel) {
        panel.setLayout(null);

        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); 
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); 
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForExcel(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	        
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
   	    
   	 backButton.addActionListener(e -> {
    	    frame.dispose(); // Close current window
    	    main(new String[]{}); // Restart the course selection window
    	});
 		
	}

	private static void saveToDatabaseForExcel(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO ExcelForDataAnalysis (FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}
    private static void displayStudentManagementSystemDataLawAndGov() {
        frame = new JFrame("Data Law And Governance");
        frame.setSize(700, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);

        placeComponentsForDataLawAndGov(panel);
        frame.setVisible(true);
    }

    private static void placeComponentsForDataLawAndGov(JPanel panel) {
        panel.setLayout(null);

        JLabel firstNameLabel = new JLabel("First Name:");
        firstNameLabel.setBounds(150, 20, 150, 25);
        panel.add(firstNameLabel);

        JTextField firstNameText = new JTextField(20);
        firstNameText.setBounds(310, 20, 200, 25);
        panel.add(firstNameText);

        JLabel lastNameLabel = new JLabel("Last Name:");
        lastNameLabel.setBounds(150, 50, 150, 25);
        panel.add(lastNameLabel);

        JTextField lastNameText = new JTextField(20);
        lastNameText.setBounds(310, 50, 200, 25);
        panel.add(lastNameText);

        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(150, 80, 150, 25);
        panel.add(emailLabel);

        JTextField emailText = new JTextField(20);
        emailText.setBounds(310, 80, 200, 25);
        panel.add(emailText);

        JLabel phoneLabel = new JLabel("Phone Number:");
        phoneLabel.setBounds(150, 110, 150, 25);
        panel.add(phoneLabel);

        JTextField phoneText = new JTextField(20);
        phoneText.setBounds(310, 110, 200, 25);
        panel.add(phoneText);

        JLabel organisationLabel = new JLabel("Organisation:");
        organisationLabel.setBounds(150, 140, 150, 25);
        panel.add(organisationLabel);

        JTextField organisationText = new JTextField(20);
        organisationText.setBounds(310, 140, 200, 25);
        panel.add(organisationText);

        JLabel professionLabel = new JLabel("Profession:");
        professionLabel.setBounds(150, 170, 150, 25);
        panel.add(professionLabel);

        JTextField professionText = new JTextField(20);
        professionText.setBounds(310, 170, 200, 25);
        panel.add(professionText);

        JLabel totalFeeLabel = new JLabel("Total Fee:");
        totalFeeLabel.setBounds(150, 200, 150, 25);
        panel.add(totalFeeLabel);

        JTextField totalFeeText = new JTextField(20);
        totalFeeText.setBounds(310, 200, 200, 25);
        panel.add(totalFeeText);

        JLabel feePaidLabel = new JLabel("Fee Paid:");
        feePaidLabel.setBounds(150, 230, 150, 25);
        panel.add(feePaidLabel);

        JTextField feePaidText = new JTextField(20);
        feePaidText.setBounds(310, 230, 200, 25);
        panel.add(feePaidText);

        JLabel startDateLabel = new JLabel("Start Date (YYYY-MM-DD):");
        startDateLabel.setBounds(150, 260, 150, 25);
        panel.add(startDateLabel);

        JTextField startDateText = new JTextField(20);
        startDateText.setBounds(310, 260, 200, 25);
        panel.add(startDateText);

        JLabel completionDateLabel = new JLabel("Completion Date (YYYY-MM-DD):");
        completionDateLabel.setBounds(150, 290, 150, 25);
        panel.add(completionDateLabel);

        JTextField completionDateText = new JTextField(20);
        completionDateText.setBounds(310, 290, 200, 25);
        panel.add(completionDateText);

        JLabel attendanceLabel = new JLabel("Class Attendance:");
        attendanceLabel.setBounds(150, 320, 150, 25);
        panel.add(attendanceLabel);

        JTextField attendanceText = new JTextField(20);
        attendanceText.setBounds(310, 320, 200, 25);
        panel.add(attendanceText);

        JLabel cohortLabel = new JLabel("Cohort Number:");
        cohortLabel.setBounds(150, 350, 150, 25);
        panel.add(cohortLabel);

        JTextField cohortText = new JTextField(20);
        cohortText.setBounds(310, 350, 200, 25);
        panel.add(cohortText);

        JLabel commentLabel = new JLabel("Comment:");
        commentLabel.setBounds(150, 380, 150, 25); // Fixed spacing issue
        panel.add(commentLabel);

        JTextField commentText = new JTextField(20);
        commentText.setBounds(310, 380, 200, 25); // Fixed spacing issue
        panel.add(commentText);

        // Buttons
        JButton saveButton = new JButton("Save");
        saveButton.setBounds(150, 430, 80, 25);
        panel.add(saveButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setBounds(250, 430, 80, 25);
        panel.add(cancelButton);

        JButton clearButton = new JButton("Clear");
        clearButton.setBounds(350, 430, 80, 25);
        panel.add(clearButton);

        JButton backButton = new JButton("Back");
        backButton.setBounds(450, 430, 80, 25);
        panel.add(backButton);
        
	        frame.setVisible(true);

   	    // Button Actions
   	    saveButton.addActionListener(e -> {
   	        try {
   	            int cohort = Integer.parseInt(cohortText.getText());
   	            int TotalFee = Integer.parseInt(totalFeeText.getText());
   	            int feepaid = Integer.parseInt(feePaidText.getText());
   	            saveToDatabaseForDataLawAndGov(
   	                firstNameText.getText(),
   	                lastNameText.getText(),
   	                emailText.getText(),
   	                phoneText.getText(),
   	                organisationText.getText(),
   	                professionText.getText(),
   	                TotalFee,
   	                feepaid,
   	                startDateText.getText(),
   	                completionDateText.getText(),
   	                attendanceText.getText(),
   	                cohort,
   	                commentText.getText()
   	            );
   	        } catch (NumberFormatException ex) {
   	            JOptionPane.showMessageDialog(null, "Invalid input. Ensure Cohort and Fee Balance are valid integers.");
   	        }
   	    });

   	    cancelButton.addActionListener(e -> System.exit(0));

   	    clearButton.addActionListener(e -> {
   	        firstNameText.setText("");
   	        lastNameText.setText("");
   	        emailText.setText("");
   	        phoneText.setText("");
   	        organisationText.setText("");
   	        professionText.setText("");
   	        totalFeeText.setText("");
   	        feePaidText.setText("");
   	        startDateText.setText("");
   	        completionDateText.setText("");
   	        attendanceText.setText("");
   	        cohortText.setText("");
   	        commentText.setText("");
   	    });
   	 backButton.addActionListener(e -> {
    	    frame.dispose(); // Close current window
    	    main(new String[]{}); // Restart the course selection window
    	});
 		
	}

	private static void saveToDatabaseForDataLawAndGov(String firstName, String lastName, String email, String phone ,String organisation, String profession, int totalFee,
   			int feePaid,String startDate, String completionDate, String attendance, int cohort, String comment) {
   		 String url = "jdbc:mysql://localhost:3306/StudentManagementSystem";
    	    String username = "root";
    	    String password = "";

    	    try (Connection connection = DriverManager.getConnection(url, username, password)) {
    	        String sql = "INSERT INTO DataLawAndGov(FirstName, LastName, Email, Phone, Organisation, Profession, TotalFee, FeePaid, StartDate, CompletionDate, Attendance ,Cohort, Comment) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)";
    	        try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
    	            preparedStatement.setString(1, firstName);
    	            preparedStatement.setString(2, lastName);
    	            preparedStatement.setString(3, email);
    	            preparedStatement.setString(4, phone);
    	            preparedStatement.setString(5, organisation);
    	            preparedStatement.setString(6, profession);
    	            preparedStatement.setInt(7, totalFee);
    	            preparedStatement.setInt(8, feePaid);
    	            preparedStatement.setString(9, startDate);
    	            preparedStatement.setString(10, completionDate);
    	           preparedStatement.setString(11, attendance);
    	            preparedStatement.setInt(12, cohort);
    	            preparedStatement.setString(13, comment);

    	            int rowsInserted = preparedStatement.executeUpdate();
    	            if (rowsInserted > 0) {
    	                JOptionPane.showMessageDialog(null, "Student record saved successfully!");
    	            }
    	        }
    	    } catch (SQLException ex) {
    	        JOptionPane.showMessageDialog(null, "Error saving student record: " + ex.getMessage());
    	    }
	}
	
}

